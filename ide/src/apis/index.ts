// Auto generated by apis tool!
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable prefer-rest-params */
import { config } from 'egg';
import { Assets } from 'egg/project';
import { Model } from 'egg/speech';
import { rpc } from '../rpc';
export const project = {
  /**
   * list
   */
  list(): Promise<RecSet<string>> {
    return rpc.request('project.list', ...arguments);
  },
  /**
   * create
   */
  create(name: string): Promise<config.Project> {
    return rpc.request('project.create', ...arguments);
  },
  /**
   * load
   */
  load(name: string): Promise<config.Project> {
    return rpc.request('project.load', ...arguments);
  },
  /**
   * save
   */
  save(name: string, cfg: config.Project): Promise<void> {
    return rpc.request('project.save', ...arguments);
  },
  /**
   * remove
   */
  remove(name: string): Promise<void> {
    return rpc.request('project.remove', ...arguments);
  },
  /**
   * assets
   */
  assets(name: string): Promise<Assets> {
    return rpc.request('project.assets', ...arguments);
  },
  /**
   * remove resource from assets, filename = '[models|sounds|textures]/name'
   */
  removeAsset(name: string, filename: string): Promise<void> {
    return rpc.request('project.removeAsset', ...arguments);
  },
};

export const speech = {
  /**
   * get models list
   */
  models(projectName: string): Promise<Array<Model>> {
    return rpc.request('speech.models', ...arguments);
  },
  /**
   * save meta data
   */
  saveTransferMeta(projectName: string, name: string, data: any): Promise<void> {
    return rpc.request('speech.saveTransferMeta', ...arguments);
  },
};

export const fs = {
  /**
   * readFile
   */
  readFile(filepath: string): Promise<Buffer> {
    return rpc.request('fs.readFile', ...arguments);
  },
  /**
   * writeFile
   */
  writeFile(filepath: string, data: Buffer): Promise<void> {
    return rpc.request('fs.writeFile', ...arguments);
  },
};
